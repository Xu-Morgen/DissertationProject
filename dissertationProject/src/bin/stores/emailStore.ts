// stores/emailStore.ts
import { defineStore } from 'pinia';
import type { Email, SentEmail, Reply, Task, UserTask } from '../types/emails'; // 根据实际路径调整
import type { TaskEmail } from '../types/emails';

type EmailState = {
  newMails: number;
  emails: Email[];
  currentEmail: Email | null;
  replyCanUse: string[]; // 改为存储回复选项ID
};

export const useEmailStore = defineStore('emails', {
  state: (): EmailState => ({
    newMails: 0,
    emails: [],
    currentEmail: null,
    replyCanUse: []
  }),
  actions: {
    addAutoGeneratedEmail(templateId: number, variables: Record<string, string>) {
      const template = EmailTemplates[templateId];
      const newEmail = {
        ...template,
        content: this.parseTemplate(template.content, variables),
        id: Date.now()
      };
      this.emails.push(newEmail);
    },
    // 添加通用邮件
    addMail(newMail: Email) {
      this.emails.push(newMail);
      this.newMails += 1;
    },

    // 添加已发送邮件（特殊处理）
    addSentEmail(sent: Omit<SentEmail, 'type'> & { recipients: string[] }) {
      const newSentEmail: SentEmail = {
        ...sent,
        type: 'Sent',
        timestamp: new Date().toISOString()
      };
      this.emails.push(newSentEmail);
    },

    // 设置当前邮件
    setCurrentEmail(id: number) {
      const email = this.emails.find(e => e.id === id);
      if (email) this.currentEmail = email;
    },

    // 处理回复选项
    addReplyCanUse(optionId: string) {
      if (!this.replyCanUse.includes(optionId)) {
        this.replyCanUse.push(optionId);
      }
    },

    removeReplyCanUse(optionId: string) {
      this.replyCanUse = this.replyCanUse.filter(id => id !== optionId);
    },

    // 更新任务状态
    updateTaskStatus(taskId: number, status: Task['status']) {
      const email = this.emails.find(e => 
        e.type === 'Task' && e.task.id === taskId
      ) as TaskEmail | undefined;
      
      if (email) {
        email.task.status = status;
        if (status === 'completed') this.newMails = Math.max(0, this.newMails - 1);
      }
    },

    // 标记邮件为已读
    markAsRead(id: number) {
      const email = this.emails.find(e => e.id === id);
      if (email && !email.read) {
        email.read = true;
        this.newMails = Math.max(0, this.newMails - 1);
      }
    }
  },
  getters: {
    // 获取已发送邮件（自动过滤）
    sentEmails: (state) => {
      return state.emails.filter((e): e is SentEmail => e.type === 'Sent');
    },

    // 获取待处理任务
    pendingTasks: (state) => {
      return state.emails.filter((e): e is TaskEmail => 
        e.type === 'Task' && e.task.status === 'pending'
      );
    },

    // 获取可用回复选项
    availableReplies: (state) => {
      return state.replyCanUse.flatMap(optionId => {
        const [emailId, replyId] = optionId.split('-');
        const email = state.emails.find(e => e.id === Number(emailId));
        return email?.type === 'Reply' 
          ? email.reply.options.find(opt => opt.id === replyId) 
          : undefined;
      }).filter(Boolean);
    }
  },
  persist: true
});